#!/usr/bin/env php
<?php

declare(strict_types=1);

/*
 * This file is part of the boo/lua-parser library.
 *
 * (c) Jonas Stendahl <jonas@stendahl.me>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;

\chdir(__DIR__.'/..');

require 'vendor/autoload.php';

(function (): void {
    $name = \basename(__FILE__);
    $application = new Application($name, '1.0.0');
    $command = $application->register($name);

    $command->addArgument('path', InputArgument::REQUIRED, 'Path to your World of Warcraft directory');
    $command->setCode(function (InputInterface $input, OutputInterface $output): int {
        $style = new SymfonyStyle($input, $output);
        $path = $input->getArgument('path');
        $wtfPath = $path.'/WTF';

        if (\is_dir($path) === false || \is_dir($wtfPath) === false) {
            $style->error('"'.$path.'" is not a valid World of Warcraft directory.');

            return 1;
        }

        $filesystem = new Filesystem();
        $finder = (new Finder())->in($wtfPath)->name('*.lua');

        $style->progressStart(\count($finder));

        foreach ($finder as $file) {
            $pathname = $file->getPathname();
            $hash = \hash_file('sha256', $pathname);
            $fixture = \vsprintf('tests/Fixtures/%s/%s/%s/%s.lua', [
                \mb_substr($hash, 0, 2),
                \mb_substr($hash, 2, 2),
                \mb_substr($hash, 4, 2),
                \mb_substr($hash, 6),
            ]);

            if ($filesystem->exists($fixture) === false) {
                $filesystem->copy($pathname, $fixture);
            }

            $style->progressAdvance();
        }

        $style->progressFinish();

        return 0;
    });

    $application->setDefaultCommand($name, true);
    $application->run();
})();
